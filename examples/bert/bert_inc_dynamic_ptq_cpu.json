{
    "input_model": {
        "type": "PyTorchModel",
        "config": {
            "model_loader": "load_pytorch_origin_model",
            "model_script": "user_script.py",
            "io_config": {
                "input_names": [ "input_ids", "attention_mask", "token_type_ids" ],
                "input_shapes": [ [ 1, 128 ], [ 1, 128 ], [ 1, 128 ] ],
                "input_types": [ "int64", "int64", "int64" ],
                "output_names": [ "output" ]
            }
        }
    },
    "data_configs": [
        {
            "name": "glue_mrpc",
            "type": "HuggingfaceContainer",
            "user_script": "user_script.py",
            "load_dataset_config": {
                "params": {
                    "data_name": "glue",
                    "split": "validation",
                    "subset": "mrpc"
                }
            },
            "pre_process_data_config": {
                "params": {
                    "input_cols": [ "sentence1", "sentence2" ],
                    "label_cols": [ "label" ],
                    "max_samples": 100
                }
            },
            "dataloader_config": { "params": { "batch_size": 1 } }
        }
    ],
    "evaluators": {
        "common_evaluator": {
            "metrics": [
                {
                    "name": "accuracy",
                    "type": "accuracy",
                    "data_config": "glue_mrpc",
                    "sub_types": [ { "name": "accuracy_score", "priority": 1 } ],
                    "user_config": { "post_processing_func": "post_process", "user_script": "user_script.py" }
                },
                {
                    "name": "latency",
                    "type": "latency",
                    "data_config": "glue_mrpc",
                    "sub_types": [ { "name": "avg", "priority": 2 } ]
                }
            ]
        }
    },
    "passes": {
        "conversion": { "type": "OnnxConversion", "config": { "target_opset": 14 } },
        "transformers_optimization": {
            "type": "OrtTransformersOptimization",
            "disable_search": true,
            "config": { "model_type": "bert" }
        },
        "dynamic_quantization": { "type": "IncDynamicQuantization" }
    },
    "engine": {
        "search_strategy": { "execution_order": "joint", "search_algorithm": "exhaustive" },
        "evaluator": "common_evaluator",
        "cache_dir": "cache",
        "output_dir": "models/bert_inc_dynamic_ptq_cpu"
    }
}
