{
    "input_model": {
        "type": "HfModel",
        "config": {
            "model_path": "meta-llama/Llama-2-7b-hf",
            "load_kwargs": {
                "attn_implementation": "eager"
            },
            "io_config": {
                "input_names": [ "input_ids", "attention_mask", "position_ids" ],
                "output_names": [ "logits" ],
                "input_shapes": [ [ 2, 8 ], [ 2, 8 ], [ 2, 8 ] ],
                "input_types": [ "int64", "int64", "int64" ],
                "dynamic_axes": {
                    "input_ids": { "0": "batch_size", "1": "sequence_length" },
                    "attention_mask": { "0": "batch_size", "1": "total_sequence_length" },
                    "position_ids": { "0": "batch_size", "1": "sequence_length" }
                }
            }
        }
    },
    "systems": {
        "local_system": {
            "type": "LocalSystem",
            "config": { "accelerators": [ { "device": "gpu", "execution_providers": [ "CUDAExecutionProvider" ] } ] }
        }
    },
    "data_configs": [
        {
            "name": "tiny_codes_train",
            "type": "HuggingfaceContainer",
            "user_script": "user_script.py",
            "load_dataset_config": {
                "type": "tiny_code_dataset",
                "params": {
                    "data_name": "nampdn-ai/tiny-codes",
                    "split": "train",
                    "language": "Python",
                    "token": true
                }
            },
            "pre_process_data_config": {
                "params": { "text_template": "### Question: {prompt} \n### Answer: {response}" }
            }
        }
    ],
    "evaluators": {
        "merged_evaluator": {
            "metrics": [
                {
                    "name": "onnx_merged_latency",
                    "type": "latency",
                    "sub_types": [ { "name": "avg", "priority": 1 } ],
                    "data_config": {
                        "name": "transformer_prompt_dummy_data",
                        "type": "TransformersPromptDummyDataContainer"
                    },
                    "user_config": { "io_bind": true }
                }
            ]
        }
    },
    "passes": {
        "qlora": {
            "type": "QLoRA",
            "config": {
                "lora_dropout": 0.1,
                "train_data_config": "tiny_codes_train",
                "eval_dataset_size": 1024,
                "training_args": {
                    "per_device_train_batch_size": 16,
                    "per_device_eval_batch_size": 16,
                    "gradient_accumulation_steps": 1,
                    "max_steps": 150,
                    "logging_steps": 50,
                    "save_steps": 50,
                    "evaluation_strategy": "steps",
                    "adam_beta2": 0.999,
                    "max_grad_norm": 0.3,
                    "load_best_model_at_end": true,
                    "output_dir": "models/qlora-checkpoints"
                }
            }
        },
        "conversion": {
            "type": "OnnxConversion",
            "config": {
                "target_opset": 17,
                "save_as_external_data": true,
                "all_tensors_to_one_file": true,
                "torch_dtype": "float32",
                "save_metadata_for_token_generation": true
            }
        },
        "transformers_optimization": {
            "type": "OrtTransformersOptimization",
            "config": {
                "save_as_external_data": true,
                "all_tensors_to_one_file": true,
                "model_type": "gpt2",
                "opt_level": 0,
                "only_onnxruntime": false,
                "keep_io_types": false,
                "float16": true
            }
        },
        "extract": {
            "type": "ExtractAdapters",
            "config": {
                "save_as_external_data": true,
                "all_tensors_to_one_file": true,
                "make_inputs": true
            }
        },
        "metadata": { "type": "ModelBuilder", "config": { "precision": "fp16", "metadata_only": true } }
    },
    "engine": {
        "evaluator": "merged_evaluator",
        "host": "local_system",
        "target": "local_system",
        "cache_dir": "cache",
        "output_dir": "models/tiny-codes-qlora"
    }
}
