# Olive Build and Test Pipeline template for examples on Azure DevOps

parameters:
  name: ''
  pool: ''
  python_version: '3.10'
  device: 'cpu'
  dockerfile: '.azure_pipelines/dockerfiles/linux-cpu.dockerfile'
  docker_image: 'olive-pipeline:latest'
  base_image: 'ubuntu:22.04'
  trt_version: ''
  onnxruntime: 'onnxruntime'
  subfolder: 'local'
  torch: 'torch'
  test_script: 'run_test.sh'
  onnxruntime_nightly: false

jobs:
- job: ${{ parameters.name }}_Test_Examples
  timeoutInMinutes: 300
  pool:
    name: ${{ parameters.pool }}
  strategy:
    matrix:
      ${{ insert }}: ${{ parameters.examples }}
  variables:
    PIP_CACHE_DIR: $(Pipeline.Workspace)/.cache/pip
    HF_HOME: $(Pipeline.Workspace)/.cache/huggingface
    OLIVE_TEMPDIR: $(Pipeline.Workspace)/.olive_tempdir

  steps:
  - script: docker system df && docker system prune -a -f && docker system df
    displayName: Clean docker images
    continueOnError: true

  - template: build-docker-image-template.yaml
    parameters:
      python_version: ${{ parameters.python_version }}
      dockerfile: ${{ parameters.dockerfile }}
      docker_image: ${{ parameters.docker_image }}
      base_image: ${{ parameters.base_image }}
      trt_version: ${{ parameters.trt_version }}

  # set exampleRequirements to requirements.txt if user does not specify
  - script:
      echo "##vso[task.setvariable variable=exampleRequirements]requirements.txt"
    displayName: Set exampleRequirements
    condition: eq(variables['exampleRequirements'], '')

  - script: |
      GPU_OPTION=""
      if [ "${{ parameters.device }}" = "gpu" ]; then
          GPU_OPTION="--gpus=all"
      fi
      docker run \
      --shm-size=4g \
      $GPU_OPTION \
      -v $(Build.SourcesDirectory)/logs:/logs \
      -e WORKSPACE_SUBSCRIPTION_ID=$(workspace-subscription-id) \
      -e WORKSPACE_RESOURCE_GROUP=$(workspace-resource-group) \
      -e WORKSPACE_NAME=$(workspace-name) \
      -e MANAGED_IDENTITY_CLIENT_ID=$(olive-1es-identity-client-id) \
      -e PIPELINE_TEST_ACCOUNT_NAME=$(pipeline-test-account-name) \
      -e PIPELINE_TEST_CONTAINER_NAME=$(pipeline-test-container-name) \
      -e KEYVAULT_NAME=$(keyvault-name) \
      -e HF_TOKEN=$(hf_token) \
      ${{ parameters.docker_image }} \
      bash .azure_pipelines/scripts/${{ parameters.test_script }} \
      ${{ parameters.torch }} \
      ${{ parameters.onnxruntime }} \
      ${{ parameters.onnxruntime_nightly }} \
      examples/$(exampleFolder)/$(exampleRequirements) \
      examples/test/${{ parameters.subfolder }}/test_$(exampleName).py
    displayName: Run Tests in Docker

  # Step 3: Publish test results
  - task: PublishTestResults@2
    condition: succeededOrFailed()
    inputs:
      testResultsFiles: '**/logs/test_examples-TestOlive.xml'
      testRunTitle: '$(Build.BuildNumber)[$(Agent.JobName)]'
      failTaskOnFailedTests: true
    displayName: Publish Test Results

  - script: sudo git clean -dfX
    condition: always()
    displayName: Clean remaining artifacts
