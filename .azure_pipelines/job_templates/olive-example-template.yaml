# Olive Build and Test Pipeline template for examples on Azure DevOps

parameters:
  name: ''
  pool: ''
  python_version: '3.8'
  onnxruntime: 'onnxruntime'
  torch: 'torch'

jobs:
  - job: ${{parameters.name}}_Test_Examples
    timeoutInMinutes: 300
    pool:
      name: ${{ parameters.pool}}
    strategy:
      matrix:
        ${{ insert }}: ${{ parameters.examples }}
    variables:
      PIP_CACHE_DIR: $(Pipeline.Workspace)/.cache/pip
      HF_HOME: $(Pipeline.Workspace)/.cache/huggingface
      OLIVE_TEMPDIR: $(Pipeline.Workspace)/.olive_tempdir
      PYTEST_BASETEMP: $(Pipeline.Workspace)/.pytest_basetemp

    steps:
    - template: olive-setup-template.yaml
      parameters:
        python_version: ${{ parameters.python_version }}
        onnxruntime: ${{ parameters.onnxruntime }}
        torch: ${{ parameters.torch }}

    # set exampleRequirements to requirements.txt if user does not specify
    - script:
        echo "##vso[task.setvariable variable=exampleRequirements]requirements.txt"
      displayName: Set exampleRequirements
      condition: eq(variables['exampleRequirements'], '')

    - script: |
          python -m pip install pytest
          python -m pip install azure-identity azure-storage-blob tabulate
          python -m pip install -r $(Build.SourcesDirectory)/examples/$(exampleFolder)/$(exampleRequirements)
          python -m pytest -v -s --log-cli-level=WARNING --junitxml=$(Build.SourcesDirectory)/logs/test_examples-TestOlive.xml $(Build.SourcesDirectory)/examples/test/test_$(exampleName).py --basetemp $(PYTEST_BASETEMP)
      displayName: Test Examples
      env:
        WORKSPACE_SUBSCRIPTION_ID: $(workspace-subscription-id)
        WORKSPACE_RESOURCE_GROUP: $(workspace-resource-group)
        WORKSPACE_NAME: $(workspace-name)
        MANAGED_IDENTITY_CLIENT_ID: $(olive-1es-identity-client-id)

    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testResultsFiles: '**/*TestOlive*.xml'
        testRunTitle: '$(Build.BuildNumber)[$(Agent.JobName)]'
        failTaskOnFailedTests: true
      displayName: Upload pipeline run test results

    - script: git clean -dfX
      condition: always()
      displayName: Clean remaining artifacts
