parameters:
  name: ''
  pool: ''
  test_type: ''
  windows: False
  device: 'cpu'
  python_version: '3.8'
  onnxruntime: 'onnxruntime'
  requirements_file: 'requirements-test.txt'

jobs:
- job: ${{parameters.name}}
  timeoutInMinutes: 300
  pool:
    name: ${{ parameters.pool}}
  variables:
    WINDOWS: ${{ parameters.windows}}
    runCodesignValidationInjection: false
    testType: ${{ parameters.test_type }}
    python_version: ${{ parameters.python_version }}
    requirements_file: ${{ parameters.requirements_file }}

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: $(python_version)
    displayName: Use Python $(python_version)

  - script: docker system df && docker system prune -a -f && docker system df
    displayName: Clean docker images
    continueOnError: true

  - script: |
      python -m pip install .
    displayName: Install Olive

  - ${{ if startsWith(parameters.onnxruntime, 'ort-nightly') }}:
    - script: |
        pip install onnxruntime
        pip uninstall -y onnxruntime
        pip install ${{ parameters.onnxruntime }} --index-url https://aiinfra.pkgs.visualstudio.com/PublicPackages/_packaging/ORT-Nightly/pypi/simple/
      displayName: Install ${{ parameters.onnxruntime }}
  - ${{ else }}:
    - script: |
        pip install ${{ parameters.onnxruntime }}
      displayName: Install ${{ parameters.onnxruntime }}

  - ${{ if and(eq(variables.WINDOWS, 'True'), eq(variables.testType, 'multiple_ep')) }}:
    - script: |
          call python -m pip install pytest
          call curl --output openvino_toolkit.zip https://storage.openvinotoolkit.org/repositories/openvino/packages/2023.0.1/windows/w_openvino_toolkit_windows_2023.0.1.11005.fa1c41994f3_x86_64.zip
          call 7z x openvino_toolkit.zip
          call w_openvino_toolkit_windows_2023.0.1.11005.fa1c41994f3_x86_64\\setupvars.bat
          call python -m pip install numpy psutil coverage protobuf==3.20.3
          call coverage run --source=$(Build.SourcesDirectory)/olive -m pytest -v -s --log-cli-level=WARNING --junitxml=$(Build.SourcesDirectory)/logs/test-TestOlive.xml $(Build.SourcesDirectory)/test/$(testType)
          call coverage xml
      displayName: Test Olive
      env:
        WORKSPACE_SUBSCRIPTION_ID: $(workspace-subscription-id)
        WORKSPACE_RESOURCE_GROUP: $(workspace-resource-group)
        WORKSPACE_NAME: $(workspace-name)
        MANAGED_IDENTITY_CLIENT_ID: $(olive-1es-identity-client-id)
  - ${{ else }}:
    - script: |
          python -m pip install pytest
          python -m pip install -r $(Build.SourcesDirectory)/test/$(requirements_file)

          coverage run --source=$(Build.SourcesDirectory)/olive -m pytest -v -s --log-cli-level=WARNING --junitxml=$(Build.SourcesDirectory)/logs/test-TestOlive.xml $(Build.SourcesDirectory)/test/$(testType)
          coverage xml
      displayName: Test Olive
      env:
        WORKSPACE_SUBSCRIPTION_ID: $(workspace-subscription-id)
        WORKSPACE_RESOURCE_GROUP: $(workspace-resource-group)
        WORKSPACE_NAME: $(workspace-name)
        MANAGED_IDENTITY_CLIENT_ID: $(olive-1es-identity-client-id)

  - task: CredScan@3
    displayName: 'Run CredScan'
    inputs:
      debugMode: false
    continueOnError: true

  - task: ComponentGovernanceComponentDetection@0
    inputs:
      scanType: 'Register'
      verbosity: 'Verbose'
      alertWarningLevel: 'High'
    displayName: Component Detection

  - task: PublishTestResults@2
    condition: succeededOrFailed()
    inputs:
      testResultsFiles: '**/*TestOlive*.xml'
      testRunTitle: '$(Build.BuildNumber)[$(Agent.JobName)]'
      failTaskOnFailedTests: true
    displayName: Upload pipeline run test results

  - task: PublishCodeCoverageResults@1
    inputs:
      codeCoverageTool: 'Cobertura'
      summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.xml'

  - script: git clean -dfX
    condition: always()
    displayName: Clean remaining artifacts
