parameters:
  name: ''
  pool: ''
  test_type: ''
  device: 'cpu'
  python_version: '3.8'

jobs:
- ${{ if eq(parameters.device, 'cpu') }}:
  - job: ${{parameters.name}}_Test_Olive
    timeoutInMinutes: 300
    pool:
      name: ${{ parameters.pool}}
    variables:
      WINDOWS: ${{ parameters.windows}}
      runCodesignValidationInjection: false
      device: ${{ parameters.device }}
      testType: ${{ parameters.test_type }}
      python_version: ${{ parameters.python_version }}

    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: $(python_version)
      displayName: Use Python $(python_version)

    - script: docker system df && docker system prune -a -f && docker system df
      displayName: Clean docker images
      condition: and(eq(variables.WINDOWS, 'False'), eq(variables.testType, 'integ_test'))
      continueOnError: true

    - script: make install-olive INSTALL_EXTRAS=[$(device)]
      displayName: Install Olive

    - task: AzureCLI@1
      inputs:
        azureSubscription: $(OLIVE_RG_SERVICE_CONNECTION)
        scriptLocation: 'inlineScript'
        inlineScript: make $(testType)
      displayName: Test Olive
      env:
        OLIVEWHEELS_STORAGE_CONNECTION_STRING: $(olive-wheels-storage-connection-string)
        WORKSPACE_SUBSCRIPTION_ID: $(workspace-subscription-id)
        WORKSPACE_RESOURCE_GROUP: $(workspace-resource-group)
        WORKSPACE_NAME: $(workspace-name)
        AZURE_TENANT_ID: $(azure-tenant-id)
        AZURE_CLIENT_ID: $(olive-rg-sp-id)
        AZURE_CLIENT_SECRET: $(olive-rg-sp-secret)

    - task: CredScan@3
      displayName: 'Run CredScan'
      inputs:
        debugMode: false
      continueOnError: true

    - task: ComponentGovernanceComponentDetection@0
      inputs:
        scanType: 'Register'
        verbosity: 'Verbose'
        alertWarningLevel: 'High'
      displayName: Component Detection

    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testResultsFiles: '**/*TestOlive*.xml'
        testRunTitle: '$(Build.BuildNumber)[$(Agent.JobName)]'
      displayName: Upload pipeline run test results

    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.xml'

    - script: make clean WINDOWS=$(WINDOWS)
      condition: always()
      displayName: Clean remaining artifacts
