[tool.isort]
profile = "black"
line_length = 120

[tool.black]
line-length = 120

[tool.pylint.BASIC]
good-names = [
    "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n",
    "p", "q", "r", "s", "t", "u", "v", "w", "ex", "Run", "_", "x", "y", "z"
]

[tool.pylint.messages_control]
disable = [
    "format",
    "line-too-long",
    "import-error",
    "no-name-in-module",
    "no-member",
    "too-many-arguments",
    "too-many-locals",
    "too-few-public-methods",
    "missing-docstring",
    "fixme",
]

[tool.ruff]
line-length = 120
target-version = "py38"
select = [
    "A", # flake8-builtins
    "B", # flake8-bugbear
    "C4", # flake8-comprehensions
    "CPY", # flake8-copyright
    "D", # flake8-docstrings,
    "E", # pycodestyle
    "F", # Pyflakes
    "ICN", # flake8-import-conventions
    "INP", # flake8-no-pep420
    "ISC", # flake8-implicit-str-concat
    "N", # pep8-naming
    "NPY", # numpy
    "PD", # flake8-pandas
    "PERF", # Perflint
    "PIE", # flake8-pie
    "PLC", # pylint conventions
    "PLE", # pylint errors
    "PLW", # pylint warnings
    "PTH", # flake8-use-pathlib
    "PYI", # flake8-pyi
    "Q", # flake8-quotes
    "RET", # flake8-return
    "RSE", # flake8-raise
    "RUF", # Ruff-specific rules
    "SIM", # flake8-simplify
    "T10", # flake8-debugger
    "TCH", # flake8-type-checking
    "TD", # flake8-todo
    "TID", # flake8-tidy-imports
    "UP", # pyupgrade
    "W", # pycodestyle
    "YTT", # flake8-2020
]
# NOTE: Refrain from growing the ignore list unless for exceptional cases.
# Always include a comment to explain why.
ignore = [
    "B005", # removesuffix is only available in Python 3.9
    "B028", # FIXME: Add stacklevel to warnings
    "B905", # keep using less than Python 3.10. The strict is added in Python 3.10
    "D100", # Ignore missing docstring in public module
    "D101", # Ignore missing docstring in public class
    "D102", # Ignore missing docstring in public method
    "D103", # Ignore missing docstring in public function
    "D104", # Ignore missing docstring in public package
    "D105", # Ignore missing docstring in magic method
    "D106", # Ignore missing docstring in public nested class
    "D107", # Ignore missing docstring in __init__
    "D406", # Ignore new line after section name
    "D407", # Ignore dashed-underline-after-section
    "N803", # Argument casing
    "N812", # Allow import torch.nn.functional as F
    "N999", # Module names
    "NPY002", # np.random.Generator may not always fit our use cases
    "PERF203", # "try-except-in-loop" only affects Python <3.11, and the improvement is minor; can have false positives
    "PERF401", # List comprehensions are not always readable
    "PTH100", # We still support os.path.abspath
    "PTH103", # We still support os.makedirs
    "PTH106", # We still support os.rmdir
    "PTH107", # We still support os.remove
    "PTH110", # We still support os.path.exists
    "PTH118", # We still need support os.path.join
    "PTH119", # We still need support os.path.basename
    "PTH120", # We still need support os.path.dirname
    "PLW0603", # TODO: temp disable global variable check
    "RET505", # We prefer if/else clauses explicitly
    "RET506", # We prefer if/else clauses explicitly
    "RET507", # We prefer if/else clauses explicitly
    "RUF010", # keeping using str type explicitly
    "RUF013", # Ignore Optional type hints warning since it is available in Python 3.10
    "SIM102", # We don't prefer always combining if branches
    "SIM105", # We don't prefer use context.suppress
    "SIM108", # We don't encourage ternary operators
    "SIM114", # Don't combine if branches for debugability
    "SIM116", # Don't use dict lookup to replace if-else
    "TD003", # Ignore TODO links
    "UP006", # Ignore old typing hints
    "UP007", # Ignore old Union hints
    "UP032", # Ignore string format calls
    "UP035", # Ignore List/Dict typing import
    "UP038", # Ignore old isinstance hints
]
ignore-init-module-imports = true
unfixable = [
    "F401", # Unused imports
    "SIM112", # Use upper case for env vars
]

[tool.ruff.flake8-tidy-imports]
# Disallow all relative imports.
ban-relative-imports = "all"

[tool.ruff.pep8-naming]
# Allow Pydantic's `@validator` decorator to trigger class method treatment.
classmethod-decorators = ["classmethod", "pydantic.validator", "pydantic.root_validator"]

[tool.ruff.per-file-ignores]
".azure_pipelines/**" = ["INP001"]
"examples/**" = ["INP001"]
"olive/engine/packaging/sample_code/ONNXModel/python/**" = ["INP001"]
"scripts/**" = ["INP001", "PTH123"]
